/**
 * 
 */
package fr.utbm.drone.^agent

import fr.utbm.drone.environment.DroneEnvironment
import fr.utbm.drone.environment.ObjectType
import fr.utbm.drone.events.AgentReady
import fr.utbm.drone.events.ReadyToStart
import fr.utbm.drone.events.StartSimulation
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.OpenEventSpaceSpecification
import java.util.List
import java.util.Random
import java.util.UUID
import javax.vecmath.Point3f

/**
 * @author Willy KOUETE
 *
 */
agent SimulatorTest {
	uses DefaultContextInteractions, Lifecycle
	var waitingAgents = 0
	var env : DroneEnvironment
	var spaceId : UUID
	var envId : UUID
	
	var droneNum = 5
	var buildingNum = 20
	
	on Initialize {
		env = occurrence.parameters.get(0) as DroneEnvironment
		spaceId = occurrence.parameters.get(1) as UUID
		var espace = defaultContext.getOrCreateSpaceWithID(spaceId, OpenEventSpaceSpecification)
	    envId = spawn( EnvironmentAgent, env, spaceId )
	   generateObjects 
	}
	
	
	def generateObjects{ 
		var rd = new Random()
		for(var i =0; i<= droneNum; i++)
			this.env.generateObjects(ObjectType.DRONE, new Point3f(rd.nextFloat*this.env.width, rd.nextFloat*this.env.height, rd.nextFloat*this.env.depth))
		for(var i =0; i<= buildingNum; i++)
			this.env.generateObjects(ObjectType.BUILDING, new Point3f(rd.nextFloat*this.env.width, rd.nextFloat*this.env.height, rd.nextFloat*this.env.depth))
			this.env.generateObjects(ObjectType.TARGET, new Point3f(rd.nextFloat*this.env.width, rd.nextFloat*this.env.height, rd.nextFloat*this.env.depth))
	}
	
	
	on AgentReady[!occurrence.fromMe]{
		synchronized(this) {
			waitingAgents --
			if (waitingAgents <= 0) {
				System.out.println("Requiring simulation to start ")
				emit(new StartSimulation)
				killMe
			}
		}
	}
	
	on ReadyToStart{
		 
		System.out.println("Spawning Agents... ")
	    waitingAgents = env.dronesNumber 
	   
	    var agentParameters : List<Object> = newArrayList(spaceId, envId)
		
		for(body : env.droneBodies) {
			var agentType = DroneAgent
			spawnInContextWithID(
				agentType,
				body.id,
				defaultContext,
				agentParameters.toArray)
		}
	}
}